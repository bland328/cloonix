diff -Naur ovs/include/openvswitch/vlog.h ovs_tainted/include/openvswitch/vlog.h
--- ovs/include/openvswitch/vlog.h	2019-12-21 00:21:13.000000000 +0100
+++ ovs_tainted/include/openvswitch/vlog.h	2019-12-21 00:26:42.342799030 +0100
@@ -178,7 +178,7 @@
         static struct vlog_module this_module = {                       \
             OVS_LIST_INITIALIZER(&this_module.list),                    \
             #MODULE,                                        /* name */  \
-            { VLL_INFO, VLL_INFO, VLL_INFO },             /* levels */  \
+            { VLL_OFF, VLL_OFF, VLL_INFO },             /* levels */  \
             VLL_INFO,                                  /* min_level */  \
             true                               /* honor_rate_limits */  \
         };                                                              \
diff -Naur ovs/lib/netdev-dpdk.c ovs_tainted/lib/netdev-dpdk.c
--- ovs/lib/netdev-dpdk.c	2019-12-21 00:21:13.000000000 +0100
+++ ovs_tainted/lib/netdev-dpdk.c	2019-12-21 00:26:42.342799030 +0100
@@ -748,6 +748,7 @@
 {
     struct dpdk_mp *dmp, *next;
     bool reuse = false;
+    int ret;
 
     ovs_mutex_lock(&dpdk_mp_mutex);
     /* Check if shared memory is being used, if so check existing mempools
@@ -3646,18 +3647,18 @@
         }
     }
 
-    if (VLOG_IS_DBG_ENABLED()) {
-        struct ds mapping = DS_EMPTY_INITIALIZER;
-
-        ds_put_format(&mapping, "TX queue mapping for port '%s':\n",
-                      netdev_get_name(&dev->up));
-        for (i = 0; i < total_txqs; i++) {
-            ds_put_format(&mapping, "%2d --> %2d\n", i, dev->tx_q[i].map);
-        }
-
-        VLOG_DBG("%s", ds_cstr(&mapping));
-        ds_destroy(&mapping);
-    }
+//    if (VLOG_IS_DBG_ENABLED()) {
+//        struct ds mapping = DS_EMPTY_INITIALIZER;
+//
+//        ds_put_format(&mapping, "TX queue mapping for port '%s':\n",
+//                      netdev_get_name(&dev->up));
+//        for (i = 0; i < total_txqs; i++) {
+//            ds_put_format(&mapping, "%2d --> %2d\n", i, dev->tx_q[i].map);
+//        }
+//
+//        VLOG_DBG("%s", ds_cstr(&mapping));
+//        ds_destroy(&mapping);
+//    }
 
     free(enabled_queues);
 }
diff -Naur ovs/lib/vlog.c ovs_tainted/lib/vlog.c
--- ovs/lib/vlog.c	2019-12-21 00:21:13.000000000 +0100
+++ ovs_tainted/lib/vlog.c	2019-12-21 00:26:42.342799030 +0100
@@ -572,7 +572,7 @@
             ovs_fatal(0, "processing \"%s\": %s", arg, msg);
         }
     } else {
-        vlog_set_levels(NULL, VLF_ANY_DESTINATION, VLL_DBG);
+        vlog_set_levels(NULL, VLF_ANY_DESTINATION, VLL_WARN);
     }
 }
 
diff -Naur ovs/ofproto/ofproto-dpif-xlate.c ovs_tainted/ofproto/ofproto-dpif-xlate.c
--- ovs/ofproto/ofproto-dpif-xlate.c	2019-12-21 00:21:13.000000000 +0100
+++ ovs_tainted/ofproto/ofproto-dpif-xlate.c	2019-12-21 00:26:42.342799030 +0100
@@ -4113,6 +4113,12 @@
            xlate_report_error(ctx, "Cannot truncate output to patch port");
        }
        patch_port_output(ctx, xport, xport->peer);
+
+    if (mbridge_has_mirrors(ctx->xbridge->mbridge) && xport->xbundle) {
+        mirror_packet(ctx, xport->xbundle,
+                      xbundle_mirror_dst(xport->xbundle->xbridge,
+                                         xport->xbundle));
+    }
        return;
     }
 
